{"version":3,"sources":["Graph.js","App.js","reportWebVitals.js","index.js"],"names":["Graph","fgRef","React","useRef","data","useMemo","Object","entries","orgData","links","link","a","nodes","source","id","b","target","neighbors","push","useState","Set","highlightNodes","setHighlightNodes","highlightLinks","setHighlightLinks","hoverNode","setHoverNode","inverseSphereVolume","vol","Math","pow","PI","useEffect","current","d3Force","forceX","forceY","forceZ","strength","onClick","console","log","ref","graphData","values","nodeVal","node","gdp","enableNodeDrag","nodeThreeObject","color","subregion","getColorFromSubregion","opacity","has","THREE","transparent","linkColor","linkOpacity","nodeOpacity","onNodeClick","clear","add","forEach","neighbor","onKeyPress","e","key","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f663577e.chunk.js","sourcesContent":["import React from \"react\"\nimport ForceGraph2D from \"react-force-graph-2d\"\nimport ForceGraph3D from \"react-force-graph-3d\"\nimport orgData from \"./data.json\"\nimport rtas from \"./rtas.json\"\nimport { forceX, forceY, forceZ, forceCollide } from 'd3-force-3d'\nimport * as THREE from 'three'\n\nfunction numberToColor(number, alpha=1) {\n const r = (number & 0xff0000) >> 16;\n const g = (number & 0x00ff00) >> 8;\n const b = (number & 0x0000ff);\n return `rgba(${b},${g},${r},${alpha})`;\n}\n\nexport default function Graph() {\n\n\tconst fgRef = React.useRef();\n\n\tconst data = React.useMemo(() => {\n\t\tfor (const [key, link] of Object.entries(orgData.links)) {\n\t\t\tconst a = orgData.nodes[link.source] || orgData.nodes[link.source.id]\n\t\t\tconst b = orgData.nodes[link.target] || orgData.nodes[link.target.id]\n\t\t\t// if (a == undefined || b == undefined)\n\t\t\t// \treturn {nodes: [], links: []}\n\t\t  !a.neighbors && (a.neighbors = []);\n\t\t  !b.neighbors && (b.neighbors = []);\n\t\t  a.neighbors.push(b);\n\t\t  b.neighbors.push(a);\n\n\t\t  !a.links && (a.links = []);\n\t\t  !b.links && (b.links = []);\n\t\t  a.links.push(link);\n\t\t  b.links.push(link);\n\t\t}\n\t\treturn orgData\n\t}, [])\n\n\tconst [highlightNodes, setHighlightNodes] = React.useState(new Set());\n  const [highlightLinks, setHighlightLinks] = React.useState(new Set());\n  const [hoverNode, setHoverNode] = React.useState(null);\n\n  const [nodeClicked, setNodeClicked] = React.useState(null)\n\tconst [nodeX, setNodeX] = React.useState(null)\n\n  const handleNodeClick = node => {\n    highlightNodes.clear();\n    highlightLinks.clear();\n    if (node) {\n      highlightNodes.add(node);\n      node.neighbors && node.neighbors.forEach(neighbor => highlightNodes.add(neighbor));\n      node.links && node.links.forEach(link => highlightLinks.add(link));\n    }\n\n    setHoverNode(node || null);\n    // fgRef.current.refresh()\n    setHighlightNodes(highlightNodes);\n    setHighlightLinks(highlightLinks);\n  };\n\n\tReact.useEffect(() => {\n\t\t// add collision force\n\t\tfgRef.current.d3Force('centerX', forceX(0));\n\t\tfgRef.current.d3Force('centerY', forceY(0));\n\t\tfgRef.current.d3Force('centerZ', forceZ(0));\n\t\t// fgRef.current.d3Force('link').strength(2);\n\t\t// fgRef.current.d3Force('link').distance(link => 100 / link.rtas.length);\n\t\tfgRef.current.d3Force('charge').strength(-200);\n\t\t// fgRef.current.d3Force('collision', forceCollide(80))\n\t}, []);\n\n\tfunction inverseSphereVolume(vol) {\n\t\t// v = 4/3 pi r^3 => r = (3/4pi v)^(1/3)\n\t\treturn Math.pow(3 / (4*Math.PI) * vol, 1/3)\n\t}\n\n\tfunction getColorFromSubregion(subregion) {\n\t\tswitch(subregion) {\n\t\t\tcase 'Northern America': return 0xFFCC00\n\t\t\tcase 'Latin America and the Caribbean': return 0xF6B40E\n\n\t\t\tcase 'Western Europe': return 0x003399\n\t\t\tcase 'Southern Europe': return 0x003399\n\t\t\tcase 'Northern Europe': return 0x4c70b7\n\t\t\tcase 'Eastern Europe': return 0xDA291C\n\n\t\t\tcase 'Northern Africa': return 0xc2b280\n\t\t\tcase 'Sub-Saharan Africa': return 0x01853F\n\n\t\t\tcase 'Western Asia': return 0x9cbf5a\n\t\t\tcase 'Southern Asia': return 0xFF9933\n\t\t\tcase 'Central Asia': return 0x8d4eba\n\t\t\tcase 'Eastern Asia': return 0xAA381E\n\t\t\tcase 'South-eastern Asia': return 0x8b30bf\n\n\t\t\tcase 'Australia and New Zealand': return 0x48D1CC\n\t\t\tcase 'Polynesia': return 0x48D1CC\n\t\t\tcase 'Melanesia': return 0x48D1CC\n\t\t\tcase 'Micronesia': return 0x48D1CC\n\t\t\tcase 'Antarctica': return 0x48D1CC\n\t\t}\n\t}\n\n\tfunction getLinkColor(link) {\n\t\tif (hoverNode !== null) {\n\t\t\tif (highlightLinks.has(link)) {\n\t\t\t\treturn `rgba(255, 255, 255, 0.8)`\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn `rgba(180, 180, 180, 0.1)`\n\t\t\t}\n\t\t}\n\t\treturn `rgba(255, 255, 255, 0.1)`\n\t}\n\n\tfunction drawNode(node) {\n\t\tlet color = getColorFromSubregion(node.subregion)\n\t\tlet opacity = 0.75\n\t\tif (hoverNode !== null) {\n\t\t\tif (hoverNode === node) {\n\t\t\t\tcolor = 0xffffff\n\t\t\t\topacity = 1\n\t\t\t}\n\t\t\telse if (highlightNodes.has(node)) {\n\t\t\t\topacity = 0.9\n\t\t\t}\n\t\t\telse {\n\t\t\t\topacity = 0.4\n\t\t\t}\n\t\t}\n\t\treturn new THREE.Mesh(\n\t\t\tnew THREE.SphereGeometry(inverseSphereVolume(node.gdp*1e-9) * 1.5, 16, 16),\n\t\t\tnew THREE.MeshStandardMaterial( {color: color, opacity: opacity, transparent: true} )\n\t\t)\n\t}\n\n\tfunction handleCanvasClick() {\n\t\tconsole.log('xxx')\n\t\t// handleNodeClick(nodeX)\n\t}\n\n\tfunction handleHover(node) {\n\t\tsetNodeX(node)\n\t}\n\n\n\treturn(data &&\n\t\t<div onClick={handleCanvasClick}>\n\t\t\t<ForceGraph3D\n\t\t\t\tref={fgRef}\n\t\t    graphData={{nodes: Object.values(data.nodes), links: Object.values(data.links)}}\n\t\t    nodeVal={node => inverseSphereVolume(node.gdp*1e-9)}\n\t\t    enableNodeDrag={false}\n\t\t    // nodeColor={getNodeColor}\n\t\t    nodeThreeObject={drawNode}\n\t\t    linkColor={getLinkColor}\n\t\t    // linkWidth={link => highlightLinks.has(link) ? 2 : 0}\n\t\t    linkOpacity={1}\n\t\t    nodeOpacity={1}\n\t\t    onNodeClick={handleNodeClick}\n\t\t    onKeyPress={e => console.log(e.key)}\n\t\t  />\n\t\t</div>\n  )\n}","import './App.css';\nimport Graph from './Graph'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Graph />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}