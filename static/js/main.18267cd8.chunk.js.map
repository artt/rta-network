{"version":3,"sources":["Graph.js","InfoBox.js","App.js","reportWebVitals.js","index.js"],"names":["inverseSphereVolume","vol","Math","pow","PI","getColorFromSubregion","subregion","withSize","monitorHeight","data","rtas","selection","setSelection","highlightNodes","setHighlightNodes","highlightLinks","setHighlightLinks","size","fgRef","fullHeight","use100vh","height","React","useState","hoverNode","setHoverNode","graphLoaded","setGraphLoaded","handleNodeClick","node","clear","add","neighbors","forEach","neighbor","links","link","id","target","tmp","source","useEffect","length","rtaID","countries","sort","i","nodes","j","handleRTASelect","parseInt","slice","current","d3Force","forceX","forceY","forceZ","strength","onClick","document","activeElement","blur","className","LinearProgress","ref","width","graphData","Object","values","nodeVal","gdp","enableNodeDrag","nodeThreeObject","color","opacity","has","THREE","max","transparent","linkColor","linkOpacity","nodeOpacity","onNodeClick","onEngineTick","linkDirectionalParticleWidth","linkDirectionalParticles","getRTAs","allRTAs","Set","formatGDP","x","toFixed","getFlagFromAlpha2","alpha2","toUpperCase","replace","char","String","fromCodePoint","charCodeAt","InfoBox","worldGDP","focusNode","value","setValue","inputValue","setInputValue","countryDialogOpen","setCountryDialogOpen","rtaDialogOpen","setRTADialogOpen","getShareGDPFromNeighborsSet","Array","from","map","country","reduce","a","b","CountryText","Fragment","gdpyear","RTAText","list","rta","type","code","CountryDialog","curRTAs","page","setPage","Dialog","onClose","aria-labelledby","open","fullWidth","maxWidth","DialogTitle","name","DialogContent","DialogContentText","TableContainer","Table","aria-label","TableHead","TableRow","TableCell","align","style","TableBody","rtaIndex","curRTA","hover","e","index","component","scope","TableFooter","TablePagination","count","rowsPerPage","rowsPerPageOptions","onChangePage","event","newPage","RTADialog","curCountry","handleCountryTableClick","processedRTAs","group","rtatype","processedCountries","alpha3","region","Autocomplete","onChange","newValue","onInputChange","newInputValue","options","concat","groupBy","option","clearOnEscape","autoSelect","autoHighlight","getOptionLabel","getOptionSelected","renderOption","renderInput","params","TextField","label","inputProps","autoComplete","IconButton","disabled","filterOptions","rankCountries","matchSorter","filter","item","keys","rankRTAs","Button","App","useMemo","entries","orgData","push","useRef","average","arr","p","c","theme","createMuiTheme","palette","primary","main","secondary","ThemeProvider","orgRTAs","href","rel","bannerColor","total_gdp","hn","centroidX","centroidY","y","centroidZ","z","distRatio","hypot","cameraPosition","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.18267cd8.chunk.js","sourcesContent":["import React from \"react\"\r\nimport ForceGraph3D from \"react-force-graph-3d\"\r\nimport { use100vh } from \"react-div-100vh\"\r\nimport { forceX, forceY, forceZ } from 'd3-force-3d'\r\nimport * as THREE from 'three'\r\nimport { withSize } from 'react-sizeme'\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\n\r\nfunction inverseSphereVolume(vol) {\r\n\treturn Math.pow(3 / (4*Math.PI) * vol, 1/3)\r\n}\r\n\r\nfunction getColorFromSubregion(subregion) {\r\n\tswitch(subregion) {\r\n\t\tcase 'Northern America': return 0xFFCC00\r\n\t\tcase 'Latin America and the Caribbean': return 0xF6B40E\r\n\r\n\t\tcase 'Western Europe': return 0x003399\r\n\t\tcase 'Southern Europe': return 0x003399\r\n\t\tcase 'Northern Europe': return 0x4c70b7\r\n\t\tcase 'Eastern Europe': return 0xDA291C\r\n\r\n\t\tcase 'Northern Africa': return 0xc2b280\r\n\t\tcase 'Sub-Saharan Africa': return 0x01853F\r\n\r\n\t\tcase 'Western Asia': return 0x9cbf5a\r\n\t\tcase 'Southern Asia': return 0xFF9933\r\n\t\tcase 'Central Asia': return 0xd92e72\r\n\t\tcase 'Eastern Asia': return 0xAA381E\r\n\t\tcase 'South-eastern Asia': return 0x8b30bf\r\n\r\n\t\tcase 'Australia and New Zealand': return 0x48D1CC\r\n\t\tcase 'Polynesia': return 0x48D1CC\r\n\t\tcase 'Melanesia': return 0x48D1CC\r\n\t\tcase 'Micronesia': return 0x48D1CC\r\n\t\tcase 'Antarctica': return 0x48D1CC\r\n\t\tdefault: return 0x666666\r\n\t}\r\n}\r\n\r\nfunction Graph({ data, rtas, selection, setSelection, highlightNodes, setHighlightNodes, highlightLinks, setHighlightLinks, size, fgRef }) {\r\n\r\n  const fullHeight = use100vh() || size.height\r\n\r\n\tconst [hoverNode, setHoverNode] = React.useState(null);\r\n\t// const [highlightNodes, setHighlightNodes] = React.useState(new Set());\r\n\t// const [highlightLinks, setHighlightLinks] = React.useState(new Set());\r\n\tconst [graphLoaded, setGraphLoaded] = React.useState(false);\r\n\r\n\tfunction drawNode(node) {\r\n\t\tlet color = getColorFromSubregion(node.subregion)\r\n\t\tlet opacity = 0.75\r\n\t\tif (selection) {\r\n\t\t\tif (hoverNode === node) {\r\n\t\t\t\tcolor = 0xffffff\r\n\t\t\t\topacity = 1\r\n\t\t\t}\r\n\t\t\telse if (highlightNodes.has(node)) {\r\n\t\t\t\topacity = 0.9\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\topacity = 0.4\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn new THREE.Mesh(\r\n\t\t\tnew THREE.SphereGeometry(Math.max(inverseSphereVolume(node.gdp*1e-9), 1) * 1.5, 16, 16),\r\n\t\t\tnew THREE.MeshStandardMaterial( {color: color, opacity: opacity, transparent: true} )\r\n\t\t)\r\n\t}\r\n\r\n\tfunction getLinkColor(link) {\r\n\t\tif (selection) {\r\n\t\t\tif (highlightLinks.has(link)) {\r\n\t\t\t\treturn selection.length > 2 ? 0xffffff : getColorFromSubregion(link.target.subregion)\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn `rgba(180, 180, 180, 0.1)`\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn `rgba(255, 255, 255, 0.15)`\r\n\t}\r\n\r\n\tReact.useEffect(() => {\r\n\t\t\r\n\t\tif (selection.length > 2) {\r\n\t\t\t// select RTA\r\n\t\t\thandleRTASelect(parseInt(selection.slice(4)))\r\n\t\t}\r\n\t\telse {\r\n\t\t\tconst node = data.nodes[selection]\r\n\t\t\thandleNodeClick(node)\r\n\t\t}\r\n\t}, [selection])\r\n\r\n\tfunction handleRTASelect(rtaID) {\r\n\t\tsetHoverNode(null)\r\n\t\thighlightNodes.clear();\r\n\t\thighlightLinks.clear();\r\n\t\tconst countries = rtas[rtaID].countries.sort()\r\n\t\tfor (let i = 0; i < countries.length; i ++) {\r\n\t\t\thighlightNodes.add(data.nodes[countries[i]])\r\n\t\t\tfor (let j = i + 1; j < countries.length; j ++) {\r\n\t\t\t\thighlightLinks.add(data.links[countries[i] + '-' + countries[j]])\r\n\t\t\t}\r\n\t\t}\r\n\t\tsetHighlightNodes(highlightNodes);\r\n\t\tsetHighlightLinks(highlightLinks);\r\n\t}\r\n\r\n\tfunction handleNodeClick(node) {\r\n\r\n\t\t// console.log(node)\r\n\t\thighlightNodes.clear();\r\n\t\thighlightLinks.clear();\r\n\t\tif (node) {\r\n\t\t\thighlightNodes.add(node);\r\n\t\t\tnode.neighbors && node.neighbors.forEach(neighbor => highlightNodes.add(neighbor));\r\n\t\t\tnode.links && node.links.forEach(link => highlightLinks.add(link));\r\n\t\t\tsetSelection(node.id)\r\n\t\t}\r\n\r\n\t\tsetHoverNode(node);\r\n\t\tsetHighlightNodes(highlightNodes);\r\n\t\tsetHighlightLinks(highlightLinks);\r\n\r\n\t\thighlightLinks.forEach(link => {\r\n\t\t\tif (link.target === node) {\r\n\t\t\t\tconst tmp = link.target\r\n\t\t\t\tlink.target = link.source\r\n\t\t\t\tlink.source = tmp\r\n\t\t\t}\r\n\t\t\t// fgRef.current.emitParticle(link)\r\n\t\t})\r\n\r\n\t}\r\n\r\n\tReact.useEffect(() => {\r\n\t\tfgRef.current.d3Force('centerX', forceX(0));\r\n\t\tfgRef.current.d3Force('centerY', forceY(0));\r\n\t\tfgRef.current.d3Force('centerZ', forceZ(0));\r\n\t\tfgRef.current.d3Force('charge').strength(-150);\r\n\t}, [graphLoaded]);\r\n\r\n\tfunction foo() {\r\n\t\tdocument.activeElement.blur()\r\n\t}\r\n\r\n\treturn(\r\n\t\t<div id=\"canvas\" onClick={foo}>\r\n\t\t\t{!graphLoaded &&\r\n\t\t\t\t\t<div className=\"center full\">\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<div>Loading stuff...</div>\r\n\t\t\t\t\t\t\t<div className=\"space-top\"><LinearProgress /></div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t}\r\n\t\t\t<ForceGraph3D\r\n\t\t\t\tref={fgRef}\r\n\t\t\t\twidth={size.width}\r\n\t\t\t\theight={fullHeight}\r\n\t\t\t\tgraphData={{nodes: Object.values(data.nodes), links: Object.values(data.links)}}\r\n\t\t\t\tnodeVal={node => inverseSphereVolume(node.gdp*1e-9)}\r\n\t\t\t\tenableNodeDrag={false}\r\n\t\t\t\tnodeThreeObject={drawNode}\r\n\t\t\t\tlinkColor={getLinkColor}\r\n\t\t\t\tlinkOpacity={1}\r\n\t\t\t\tnodeOpacity={1}\r\n\t\t\t\tonNodeClick={handleNodeClick}\r\n\t\t\t\tonEngineTick={() => setGraphLoaded(true)}\r\n\t\t\t\tlinkDirectionalParticleWidth={2}\r\n\t\t\t\tlinkDirectionalParticles={link => highlightLinks.has(link) ? 3 : 0}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default withSize({ monitorHeight: true })(Graph)","import React from \"react\"\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport LocationSearchingIcon from '@material-ui/icons/LocationSearching';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { matchSorter } from 'match-sorter';\r\n\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableFooter from '@material-ui/core/TableFooter';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\n\r\nfunction getRTAs(node) {\r\n  let allRTAs = new Set()\r\n  node.links.forEach(link => {\r\n    allRTAs = new Set([...allRTAs, ...link.rtas])\r\n  })\r\n  return allRTAs\r\n}\r\n\r\nfunction formatGDP(gdp) {\r\n  let x = gdp / 1e6\r\n  if (x < 1e3) {\r\n    return `${x.toFixed(2)} million`\r\n  }\r\n  else if (x < 1e6) {\r\n    return `${(x / 1e3).toFixed(2)} billion`\r\n  }\r\n  else {\r\n    return `${(x / 1e6).toFixed(2)} trillion`\r\n  }\r\n}\r\n\r\nfunction getFlagFromAlpha2(alpha2) {\r\n\treturn alpha2.toUpperCase().replace(/./g, char => String.fromCodePoint(char.charCodeAt(0)+127397))\r\n}\r\n\r\nexport default function InfoBox({ countries, rtas, worldGDP, selection, setSelection, focusNode }) {\r\n\r\n  const [value, setValue] = React.useState(null);\r\n  const [inputValue, setInputValue] = React.useState('');\r\n  const [countryDialogOpen, setCountryDialogOpen] = React.useState(false);\r\n  const [rtaDialogOpen, setRTADialogOpen] = React.useState(false);\r\n\r\n  React.useEffect(() => {\r\n    if (selection)\r\n      setValue(selection)\r\n    else\r\n      setValue(null)\r\n  }, [selection])\r\n\r\n  function getShareGDPFromNeighborsSet(node) {\r\n    const neighborsGDP = Array.from(node.neighbors).map(country => country.gdp).reduce((a, b) => a + b, 0)\r\n    return (neighborsGDP + node.gdp) / worldGDP * 100\r\n  }\r\n  \r\n  function getShareGDPFromCountriesList(list) {\r\n    return list.map(code => countries[code]).map(country => country.gdp).reduce((a, b) => a + b, 0) / worldGDP * 100\r\n  }\r\n\r\n  function handleMoreCountryDetails() {\r\n    setCountryDialogOpen(true)\r\n  }\r\n\r\n  function handleMoreRTADetails() {\r\n    setRTADialogOpen(true)\r\n  }\r\n\r\n  function CountryText({ node }) {\r\n    return(\r\n      <React.Fragment>\r\n        {node.gdpyear > 0 && \r\n          <React.Fragment>\r\n            {`GDP: ${formatGDP(node.gdp)} USD (${node.gdpyear} estimate)`}<br />\r\n          </React.Fragment>\r\n        }\r\n        {node.neighbors &&\r\n          <React.Fragment>\r\n            {`${getRTAs(node).size} RTA${getRTAs(node).size > 1 ? \"s\" : \"\"} covering ${node.neighbors.size} ${node.neighbors.size > 1 ? \"countries\" : \"country\"}`}<br />\r\n            {`Total coverage: ${getShareGDPFromNeighborsSet(countries[selection]).toFixed(2)}% of World GDP, including itself)`}\r\n          </React.Fragment>\r\n        }\r\n      </React.Fragment>\r\n    )\r\n  }\r\n\r\n  function RTAText({ rta }) {\r\n    return(\r\n      <React.Fragment>\r\n        {`${rta.type} covering ${rta.countries.length} countries (${getShareGDPFromCountriesList(rta.countries).toFixed(2)}% of World GDP)`}<br />\r\n      </React.Fragment>\r\n    )\r\n  }\r\n\r\n  function handleRTATableClick(index) {\r\n    // console.log(index)\r\n    setCountryDialogOpen(false)\r\n    setSelection(`RTA-${index}`)\r\n  }\r\n\r\n  function handleCountryTableClick(alpha2) {\r\n    setRTADialogOpen(false)\r\n    setSelection(alpha2)\r\n  }\r\n\r\n  function CountryDialog({ node }) {\r\n    const curRTAs = [...getRTAs(node)]\r\n    const [page, setPage] = React.useState(0);\r\n    const rowsPerPage = 10\r\n    // const emptyRows = rowsPerPage - Math.min(rowsPerPage, curRTAs.length - page * rowsPerPage);\r\n    return(\r\n      <Dialog\r\n        onClose={() => setCountryDialogOpen(false)}\r\n        aria-labelledby=\"simple-dialog-title\"\r\n        open={countryDialogOpen}\r\n        fullWidth\r\n        maxWidth=\"sm\"\r\n      >\r\n        <DialogTitle id=\"simple-dialog-title\"><span className=\"flag\">{getFlagFromAlpha2(node.id)}</span>{node.name}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            <CountryText node={node} />\r\n            <TableContainer>\r\n              <Table aria-label=\"simple table\" size=\"small\">\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell>Name</TableCell>\r\n                    <TableCell align=\"center\" style={{ width: 70 }}>Type</TableCell>\r\n                    <TableCell align=\"center\" style={{ width: 30 }}>Countries</TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {curRTAs.slice(page * rowsPerPage, (page + 1) * rowsPerPage).map((rtaIndex, i) => {\r\n                    const curRTA = rtas[rtaIndex]\r\n                    return(\r\n                      <TableRow\r\n                        hover\r\n                        onClick={e => handleRTATableClick(rtaIndex)}\r\n                        key={`row${i}`}\r\n                      >\r\n                        <TableCell component=\"th\" scope=\"row\">\r\n                          {curRTA.rta}\r\n                        </TableCell>\r\n                        <TableCell align=\"center\">{curRTA.type}</TableCell>\r\n                        <TableCell align=\"center\">{curRTA.countries.length}</TableCell>\r\n                      </TableRow>\r\n                    )\r\n                  })}\r\n                  {/* {emptyRows > 0 && (\r\n                    <TableRow style={{ height: 33 * emptyRows }}>\r\n                      <TableCell colSpan={3} />\r\n                    </TableRow>\r\n                  )} */}\r\n                </TableBody>\r\n                {curRTAs.length > rowsPerPage &&\r\n                  <TableFooter>\r\n                    <TableRow>\r\n                      <TablePagination\r\n                        count={curRTAs.length}\r\n                        page={page}\r\n                        rowsPerPage={rowsPerPage}\r\n                        rowsPerPageOptions={[]}\r\n                        onChangePage={(event, newPage) => setPage(newPage)}\r\n                      />\r\n                    </TableRow>\r\n                  </TableFooter>\r\n                }\r\n              </Table>\r\n            </TableContainer>\r\n          </DialogContentText>  \r\n        </DialogContent>\r\n      </Dialog>\r\n    )\r\n  }\r\n\r\n  function RTADialog({ rta }) {\r\n    // console.log(rta)\r\n    const [page, setPage] = React.useState(0);\r\n    const rowsPerPage = 10\r\n    // const emptyRows = rowsPerPage - Math.min(rowsPerPage, curRTAs.length - page * rowsPerPage);\r\n    return(\r\n      <Dialog\r\n        onClose={() => setRTADialogOpen(false)}\r\n        aria-labelledby=\"simple-dialog-title\"\r\n        open={rtaDialogOpen}\r\n        fullWidth\r\n        maxWidth=\"sm\"\r\n      >\r\n        <DialogTitle id=\"simple-dialog-title\"><span className=\"flag\">🌐</span>{rta.rta}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            <RTAText rta={rta} />\r\n            <TableContainer>\r\n              <Table aria-label=\"simple table\" size=\"small\">\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell style={{ width: 10 }} />\r\n                    <TableCell>Country</TableCell>\r\n                    <TableCell align=\"center\" style={{ width: 140 }}>GDP (USD)</TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {rta.countries.slice(page * rowsPerPage, (page + 1) * rowsPerPage).map((alpha2, i) => {\r\n                    const curCountry = countries[alpha2]\r\n                    return(\r\n                      <TableRow\r\n                        hover\r\n                        onClick={e => handleCountryTableClick(alpha2)}\r\n                        key={`row${i}`}\r\n                      >\r\n                        <TableCell>\r\n                          {getFlagFromAlpha2(curCountry.id)}\r\n                        </TableCell>\r\n                        <TableCell component=\"th\" scope=\"row\">\r\n                          {curCountry.name}\r\n                        </TableCell>\r\n                        <TableCell align=\"center\">\r\n                          {curCountry.gdpyear !== 0\r\n                          ? <React.Fragment>\r\n                              {formatGDP(curCountry.gdp)}\r\n                              {/* <br />{curCountry.gdpyear} */}\r\n                            </React.Fragment>\r\n                          : <React.Fragment>\r\n                              –\r\n                            </React.Fragment>\r\n                          }\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    )\r\n                  })}\r\n                  {/* {emptyRows > 0 && (\r\n                    <TableRow style={{ height: 33 * emptyRows }}>\r\n                      <TableCell colSpan={3} />\r\n                    </TableRow>\r\n                  )} */}\r\n                </TableBody>\r\n                {rta.countries.length > rowsPerPage &&\r\n                  <TableFooter>\r\n                    <TableRow>\r\n                      <TablePagination\r\n                        count={rta.countries.length}\r\n                        page={page}\r\n                        rowsPerPage={rowsPerPage}\r\n                        rowsPerPageOptions={[]}\r\n                        onChangePage={(event, newPage) => setPage(newPage)}\r\n                      />\r\n                    </TableRow>\r\n                  </TableFooter>\r\n                }\r\n              </Table>\r\n            </TableContainer>\r\n          </DialogContentText>  \r\n        </DialogContent>\r\n      </Dialog>\r\n    )\r\n  }\r\n\r\n  function renderOption(option) {\r\n    return(\r\n      <React.Fragment>\r\n        <span className=\"flag\">\r\n          {option.id.length === 2\r\n          ? <React.Fragment>{getFlagFromAlpha2(option.id)}</React.Fragment>\r\n          : <React.Fragment>🌐</React.Fragment>\r\n          }\r\n        </span>\r\n        {option.name}\r\n      </React.Fragment>\r\n    )\r\n  }\r\n\r\n  function renderInput(params) {\r\n    return(\r\n      <div className=\"search\">\r\n        <TextField\r\n          {...params}\r\n          label=\"Country or RTA\"\r\n          color=\"secondary\"\r\n          inputProps={{\r\n            ...params.inputProps,\r\n            autoComplete: 'new-password', // disable autocomplete and autofill\r\n          }}\r\n        />\r\n        <IconButton\r\n          aria-label=\"locate\"\r\n          disabled={value === null}\r\n          onClick={focusNode}\r\n        >\r\n          <LocationSearchingIcon />\r\n        </IconButton>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const processedRTAs = rtas.map((rta, i) => ({\r\n    group: 'RTAs',\r\n    id: `RTA-${i}`,\r\n    name: rta.rta,\r\n    rtatype: rta.type,\r\n    index: i\r\n  }))\r\n\r\n  const processedCountries = Object.values(countries).map(node => ({\r\n    group: 'Countries',\r\n    id: node.id,\r\n    name: node.name,\r\n    alpha3: node.alpha3,\r\n    region: node.region,\r\n    subregion: node.subregion\r\n  }))\r\n\r\n  return(\r\n    <div className=\"infobox\">\r\n      <Autocomplete\r\n        value={value}\r\n        onChange={(event, newValue) => {\r\n          setValue(newValue);\r\n          setSelection(newValue ? newValue.id : \"\")\r\n          document.activeElement.blur()\r\n        }}\r\n        inputValue={inputValue}\r\n        onInputChange={(event, newInputValue) => setInputValue(newInputValue)}\r\n        size=\"small\"\r\n        style={{ width: 300 }}\r\n        options={processedCountries.concat(processedRTAs)}\r\n        groupBy={(option) => option.group}\r\n        clearOnEscape\r\n        autoSelect\r\n        autoHighlight\r\n        getOptionLabel={(option) => {\r\n          if (typeof option === \"object\")\r\n            option = option.id\r\n          if (option.length === 2)\r\n            return countries[option] ? countries[option].name : \"\"\r\n          else {\r\n            const rtaID = parseInt(option.slice(4))\r\n            return rtas[rtaID] ? rtas[rtaID].rta : \"\"\r\n          }\r\n        }}\r\n        getOptionSelected={(option, value) => {\r\n          if (typeof value === \"object\")\r\n            value = value.id\r\n          return option.id === value\r\n        }}\r\n        renderOption={renderOption}\r\n        renderInput={renderInput}\r\n        filterOptions={(options, { inputValue }) => {\r\n          const rankCountries = matchSorter(options.filter(item => item.group === \"Countries\"), inputValue, {keys: ['name', 'id', 'alpha3']})\r\n          const rankRTAs = matchSorter(options.filter(item => item.group === \"RTAs\"), inputValue, {keys: ['name']})\r\n          return rankCountries.concat(rankRTAs)\r\n        }}\r\n      />\r\n      {selection &&\r\n        <div className=\"details\">\r\n          {selection.length === 2 && // country selected\r\n            <React.Fragment>\r\n              <CountryText node={countries[selection]} />\r\n              {countries[selection].neighbors &&\r\n                <React.Fragment>\r\n                  <div className=\"space-top\">\r\n                    <Button size=\"small\" onClick={handleMoreCountryDetails}>\r\n                      More details\r\n                    </Button>\r\n                  </div>\r\n                  <CountryDialog node={countries[selection]} />\r\n                </React.Fragment>\r\n              }\r\n            </React.Fragment>\r\n          }\r\n          {selection.length > 2 && // rta selected\r\n            <React.Fragment>\r\n              <RTAText rta={rtas[parseInt(selection.slice(4))]} />\r\n              <div className=\"space-top\">\r\n                <Button size=\"small\" onClick={handleMoreRTADetails}>\r\n                  More details\r\n                </Button>\r\n              </div>\r\n              <RTADialog rta={rtas[parseInt(selection.slice(4))]} />\r\n            </React.Fragment> \r\n          }\r\n        </div>\r\n      }\r\n    </div>\r\n  )\r\n\r\n}","import './App.css';\r\nimport React from 'react'\r\nimport Graph from './Graph'\r\nimport InfoBox from './InfoBox'\r\nimport GithubCorner from 'react-github-corner';\r\nimport orgData from \"./data.json\"\r\nimport orgRTAs from \"./rtas.json\"\r\n\r\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\r\n\r\nfunction App() {\r\n\r\n  const data = React.useMemo(() => {\r\n    for (const [, link] of Object.entries(orgData.links)) {\r\n      const a = orgData.nodes[link.source] || orgData.nodes[link.source.id]\r\n      const b = orgData.nodes[link.target] || orgData.nodes[link.target.id]\r\n      // if (a == undefined || b == undefined)\r\n      // \treturn {nodes: [], links: []}\r\n      !a.neighbors && (a.neighbors = new Set());\r\n      !b.neighbors && (b.neighbors = new Set());\r\n      a.neighbors.add(b);\r\n      b.neighbors.add(a);\r\n\r\n      !a.links && (a.links = []);\r\n      !b.links && (b.links = []);\r\n      a.links.push(link);\r\n      b.links.push(link);\r\n    }\r\n    // const friendSize = Object.entries(orgData.nodes).map(x => x[1]).map(y => (y.neighbors ? getTotalGDP(y.neighbors) + y.gdp : y.gdp) / orgData.total_gdp * 100 )\r\n    // console.log(friendSize.indexOf(Math.max(...friendSize)), Math.max(...friendSize))\r\n    return orgData\r\n  }, [])\r\n\r\n  const [selection, setSelection] = React.useState(\"\")\r\n  const [highlightNodes, setHighlightNodes] = React.useState(new Set());\r\n\tconst [highlightLinks, setHighlightLinks] = React.useState(new Set());\r\n\tconst fgRef = React.useRef();\r\n\r\n  const average = (arr) => arr.reduce( ( p, c ) => p + c, 0 ) / arr.length;\r\n\r\n  function focusNode() {\r\n    const hn = [...highlightNodes]\r\n    const centroidX = average(hn.map(node => node.x))\r\n    const centroidY = average(hn.map(node => node.y))\r\n    const centroidZ = average(hn.map(node => node.z))\r\n    const distance = 800\r\n\t\tconst distRatio = 1 + distance / Math.hypot(centroidX, centroidY, centroidZ)\r\n\t\tfgRef.current.cameraPosition(\r\n\t\t\t{ x: centroidX * distRatio, y: centroidY * distRatio, z: centroidZ * distRatio },\r\n\t\t\t{ x: 0, y: 0, z: 0 },\r\n\t\t\t3000\r\n\t\t)\r\n  }\r\n\r\n  const theme = createMuiTheme({\r\n    palette: {\r\n      type: \"dark\",\r\n      primary: {\r\n        main: \"#20635d\",\r\n      },\r\n      secondary: {\r\n        main: \"#ffab40\",\r\n      },\r\n    }\r\n  })\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <ThemeProvider theme={theme}>\r\n        <Graph\r\n          data={data}\r\n          rtas={orgRTAs}\r\n          selection={selection}\r\n          setSelection={setSelection}\r\n          highlightNodes={highlightNodes}\r\n          setHighlightNodes={setHighlightNodes}\r\n          highlightLinks={highlightLinks}\r\n          setHighlightLinks={setHighlightLinks}\r\n          fgRef={fgRef}\r\n        />\r\n        <GithubCorner\r\n          href=\"https://github.com/artt/rta-network\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n          bannerColor=\"#20635d\"\r\n        />\r\n        <InfoBox\r\n          countries={data.nodes}\r\n          rtas={orgRTAs}\r\n          worldGDP={orgData.total_gdp}\r\n          selection={selection}\r\n          setSelection={setSelection}\r\n          focusNode={focusNode}\r\n        />\r\n      </ThemeProvider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}