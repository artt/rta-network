{"version":3,"sources":["Graph.js","InfoBox.js","App.js","reportWebVitals.js","index.js"],"names":["inverseSphereVolume","vol","Math","pow","PI","getColorFromSubregion","subregion","withSize","monitorHeight","data","rtas","selection","setSelection","highlightNodes","setHighlightNodes","highlightLinks","setHighlightLinks","size","fgRef","fullHeight","use100vh","height","React","useState","hoverNode","setHoverNode","graphLoaded","setGraphLoaded","handleNodeClick","node","clear","add","neighbors","forEach","neighbor","links","link","id","target","tmp","source","useEffect","length","rtaID","countries","i","nodes","j","handleRTASelect","parseInt","slice","current","d3Force","forceX","forceY","forceZ","strength","onClick","document","activeElement","blur","className","LinearProgress","ref","width","graphData","Object","values","nodeVal","gdp","enableNodeDrag","nodeThreeObject","color","opacity","has","THREE","max","transparent","linkColor","linkOpacity","nodeOpacity","onNodeClick","onEngineTick","linkDirectionalParticleWidth","linkDirectionalParticles","getRTAs","allRTAs","Set","formatGDP","x","toFixed","getFlagFromAlpha2","alpha2","toUpperCase","replace","char","String","fromCodePoint","charCodeAt","InfoBox","worldGDP","focusNode","value","setValue","inputValue","setInputValue","countryDialogOpen","setCountryDialogOpen","rtaDialogOpen","setRTADialogOpen","getShareGDPFromNeighborsSet","Array","from","map","country","reduce","a","b","CountryText","Fragment","gdpyear","RTAText","list","rta","type","code","CountryDialog","curRTAs","page","setPage","rowsPerPage","min","Dialog","onClose","aria-labelledby","open","fullWidth","maxWidth","DialogTitle","name","DialogContent","DialogContentText","TableContainer","Table","aria-label","TableHead","TableRow","TableCell","align","style","TableBody","rtaIndex","curRTA","hover","e","index","component","scope","TableFooter","TablePagination","count","rowsPerPageOptions","onChangePage","event","newPage","RTADialog","curCountry","handleCountryTableClick","processedRTAs","group","rtatype","processedCountries","alpha3","region","Autocomplete","onChange","newValue","onInputChange","newInputValue","options","concat","groupBy","option","clearOnEscape","autoSelect","autoHighlight","getOptionLabel","getOptionSelected","renderOption","renderInput","params","TextField","label","inputProps","autoComplete","IconButton","disabled","filterOptions","rankCountries","matchSorter","filter","item","keys","rankRTAs","Button","App","useMemo","entries","orgData","push","useRef","average","arr","p","c","theme","createMuiTheme","palette","primary","main","secondary","ThemeProvider","orgRTAs","href","rel","bannerColor","total_gdp","hn","centroidX","centroidY","y","centroidZ","z","distRatio","hypot","cameraPosition","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.9ff607b0.chunk.js","sourcesContent":["import React from \"react\"\nimport ForceGraph3D from \"react-force-graph-3d\"\nimport { use100vh } from \"react-div-100vh\"\nimport { forceX, forceY, forceZ } from 'd3-force-3d'\nimport * as THREE from 'three'\nimport { withSize } from 'react-sizeme'\nimport LinearProgress from '@material-ui/core/LinearProgress';\n\nfunction inverseSphereVolume(vol) {\n\treturn Math.pow(3 / (4*Math.PI) * vol, 1/3)\n}\n\nfunction getColorFromSubregion(subregion) {\n\tswitch(subregion) {\n\t\tcase 'Northern America': return 0xFFCC00\n\t\tcase 'Latin America and the Caribbean': return 0xF6B40E\n\n\t\tcase 'Western Europe': return 0x003399\n\t\tcase 'Southern Europe': return 0x003399\n\t\tcase 'Northern Europe': return 0x4c70b7\n\t\tcase 'Eastern Europe': return 0xDA291C\n\n\t\tcase 'Northern Africa': return 0xc2b280\n\t\tcase 'Sub-Saharan Africa': return 0x01853F\n\n\t\tcase 'Western Asia': return 0x9cbf5a\n\t\tcase 'Southern Asia': return 0xFF9933\n\t\tcase 'Central Asia': return 0xd92e72\n\t\tcase 'Eastern Asia': return 0xAA381E\n\t\tcase 'South-eastern Asia': return 0x8b30bf\n\n\t\tcase 'Australia and New Zealand': return 0x48D1CC\n\t\tcase 'Polynesia': return 0x48D1CC\n\t\tcase 'Melanesia': return 0x48D1CC\n\t\tcase 'Micronesia': return 0x48D1CC\n\t\tcase 'Antarctica': return 0x48D1CC\n\t\tdefault: return 0x666666\n\t}\n}\n\nfunction Graph({ data, rtas, selection, setSelection, highlightNodes, setHighlightNodes, highlightLinks, setHighlightLinks, size, fgRef }) {\n\n  const fullHeight = use100vh() || size.height\n\n\tconst [hoverNode, setHoverNode] = React.useState(null);\n\t// const [highlightNodes, setHighlightNodes] = React.useState(new Set());\n\t// const [highlightLinks, setHighlightLinks] = React.useState(new Set());\n\tconst [graphLoaded, setGraphLoaded] = React.useState(false);\n\n\tfunction drawNode(node) {\n\t\tlet color = getColorFromSubregion(node.subregion)\n\t\tlet opacity = 0.75\n\t\tif (selection) {\n\t\t\tif (hoverNode === node) {\n\t\t\t\tcolor = 0xffffff\n\t\t\t\topacity = 1\n\t\t\t}\n\t\t\telse if (highlightNodes.has(node)) {\n\t\t\t\topacity = 0.9\n\t\t\t}\n\t\t\telse {\n\t\t\t\topacity = 0.4\n\t\t\t}\n\t\t}\n\t\treturn new THREE.Mesh(\n\t\t\tnew THREE.SphereGeometry(Math.max(inverseSphereVolume(node.gdp*1e-9), 1) * 1.5, 16, 16),\n\t\t\tnew THREE.MeshStandardMaterial( {color: color, opacity: opacity, transparent: true} )\n\t\t)\n\t}\n\n\tfunction getLinkColor(link) {\n\t\tif (selection) {\n\t\t\tif (highlightLinks.has(link)) {\n\t\t\t\treturn selection.length > 2 ? 0xffffff : getColorFromSubregion(link.target.subregion)\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn `rgba(180, 180, 180, 0.1)`\n\t\t\t}\n\t\t}\n\t\treturn `rgba(255, 255, 255, 0.15)`\n\t}\n\n\tReact.useEffect(() => {\n\t\t\n\t\tif (selection.length > 2) {\n\t\t\t// select RTA\n\t\t\thandleRTASelect(parseInt(selection.slice(4)))\n\t\t}\n\t\telse {\n\t\t\tconst node = data.nodes[selection]\n\t\t\thandleNodeClick(node)\n\t\t}\n\t}, [selection])\n\n\tfunction handleRTASelect(rtaID) {\n\t\tsetHoverNode(null)\n\t\thighlightNodes.clear();\n\t\thighlightLinks.clear();\n\t\tconst countries = rtas[rtaID].countries\n\t\tfor (let i = 0; i < countries.length; i ++) {\n\t\t\thighlightNodes.add(data.nodes[countries[i]])\n\t\t\tfor (let j = i + 1; j < countries.length; j ++) {\n\t\t\t\thighlightLinks.add(data.links[countries[i] + '-' + countries[j]])\n\t\t\t}\n\t\t}\n\t\tsetHighlightNodes(highlightNodes);\n\t\tsetHighlightLinks(highlightLinks);\n\t}\n\n\tfunction handleNodeClick(node) {\n\n\t\t// console.log(node)\n\t\thighlightNodes.clear();\n\t\thighlightLinks.clear();\n\t\tif (node) {\n\t\t\thighlightNodes.add(node);\n\t\t\tnode.neighbors && node.neighbors.forEach(neighbor => highlightNodes.add(neighbor));\n\t\t\tnode.links && node.links.forEach(link => highlightLinks.add(link));\n\t\t\tsetSelection(node.id)\n\t\t}\n\n\t\tsetHoverNode(node);\n\t\tsetHighlightNodes(highlightNodes);\n\t\tsetHighlightLinks(highlightLinks);\n\n\t\thighlightLinks.forEach(link => {\n\t\t\tif (link.target === node) {\n\t\t\t\tconst tmp = link.target\n\t\t\t\tlink.target = link.source\n\t\t\t\tlink.source = tmp\n\t\t\t}\n\t\t\t// fgRef.current.emitParticle(link)\n\t\t})\n\n\t}\n\n\tReact.useEffect(() => {\n\t\tfgRef.current.d3Force('centerX', forceX(0));\n\t\tfgRef.current.d3Force('centerY', forceY(0));\n\t\tfgRef.current.d3Force('centerZ', forceZ(0));\n\t\tfgRef.current.d3Force('charge').strength(-150);\n\t}, [graphLoaded]);\n\n\tfunction foo() {\n\t\tdocument.activeElement.blur()\n\t}\n\n\treturn(\n\t\t<div id=\"canvas\" onClick={foo}>\n\t\t\t{!graphLoaded &&\n\t\t\t\t\t<div className=\"center full\">\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<div>Loading stuff...</div>\n\t\t\t\t\t\t\t<div className=\"space-top\"><LinearProgress /></div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t}\n\t\t\t<ForceGraph3D\n\t\t\t\tref={fgRef}\n\t\t\t\twidth={size.width}\n\t\t\t\theight={fullHeight}\n\t\t\t\tgraphData={{nodes: Object.values(data.nodes), links: Object.values(data.links)}}\n\t\t\t\tnodeVal={node => inverseSphereVolume(node.gdp*1e-9)}\n\t\t\t\tenableNodeDrag={false}\n\t\t\t\tnodeThreeObject={drawNode}\n\t\t\t\tlinkColor={getLinkColor}\n\t\t\t\tlinkOpacity={1}\n\t\t\t\tnodeOpacity={1}\n\t\t\t\tonNodeClick={handleNodeClick}\n\t\t\t\tonEngineTick={() => setGraphLoaded(true)}\n\t\t\t\tlinkDirectionalParticleWidth={2}\n\t\t\t\tlinkDirectionalParticles={link => highlightLinks.has(link) ? 3 : 0}\n\t\t\t/>\n\t\t</div>\n\t)\n}\n\nexport default withSize({ monitorHeight: true })(Graph)","import React from \"react\"\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\nimport LocationSearchingIcon from '@material-ui/icons/LocationSearching';\nimport IconButton from '@material-ui/core/IconButton';\nimport { matchSorter } from 'match-sorter';\n\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport Button from '@material-ui/core/Button';\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableFooter from '@material-ui/core/TableFooter';\nimport TableRow from '@material-ui/core/TableRow';\nimport TablePagination from '@material-ui/core/TablePagination';\n\nfunction getRTAs(node) {\n  let allRTAs = new Set()\n  node.links.forEach(link => {\n    allRTAs = new Set([...allRTAs, ...link.rtas])\n  })\n  return allRTAs\n}\n\nfunction formatGDP(gdp) {\n  let x = gdp / 1e6\n  if (x < 1e3) {\n    return `${x.toFixed(2)} million`\n  }\n  else if (x < 1e6) {\n    return `${(x / 1e3).toFixed(2)} billion`\n  }\n  else {\n    return `${(x / 1e6).toFixed(2)} trillion`\n  }\n}\n\nfunction getFlagFromAlpha2(alpha2) {\n\treturn alpha2.toUpperCase().replace(/./g, char => String.fromCodePoint(char.charCodeAt(0)+127397))\n}\n\nexport default function InfoBox({ countries, rtas, worldGDP, selection, setSelection, focusNode }) {\n\n  const [value, setValue] = React.useState(null);\n  const [inputValue, setInputValue] = React.useState('');\n  const [countryDialogOpen, setCountryDialogOpen] = React.useState(false);\n  const [rtaDialogOpen, setRTADialogOpen] = React.useState(false);\n\n  React.useEffect(() => {\n    if (selection)\n      setValue(selection)\n    else\n      setValue(null)\n  }, [selection])\n\n  function getShareGDPFromNeighborsSet(node) {\n    const neighborsGDP = Array.from(node.neighbors).map(country => country.gdp).reduce((a, b) => a + b, 0)\n    return (neighborsGDP + node.gdp) / worldGDP * 100\n  }\n  \n  function getShareGDPFromCountriesList(list) {\n    return list.map(code => countries[code]).map(country => country.gdp).reduce((a, b) => a + b, 0) / worldGDP * 100\n  }\n\n  function handleMoreCountryDetails() {\n    setCountryDialogOpen(true)\n  }\n\n  function handleMoreRTADetails() {\n    setRTADialogOpen(true)\n  }\n\n  function CountryText({ node }) {\n    return(\n      <React.Fragment>\n        {node.gdpyear > 0 && \n          <React.Fragment>\n            {`GDP: ${formatGDP(node.gdp)} USD (${node.gdpyear} estimate)`}<br />\n          </React.Fragment>\n        }\n        {node.neighbors &&\n          <React.Fragment>\n            {`${getRTAs(node).size} RTA${getRTAs(node).size > 1 ? \"s\" : \"\"} covering ${node.neighbors.size} ${node.neighbors.size > 1 ? \"countries\" : \"country\"}`}<br />\n            {`Total coverage: ${getShareGDPFromNeighborsSet(countries[selection]).toFixed(2)}% of World GDP, including itself)`}\n          </React.Fragment>\n        }\n      </React.Fragment>\n    )\n  }\n\n  function RTAText({ rta }) {\n    return(\n      <React.Fragment>\n        {`${rta.type} covering ${rta.countries.length} countries (${getShareGDPFromCountriesList(rta.countries).toFixed(2)}% of World GDP)`}<br />\n      </React.Fragment>\n    )\n  }\n\n  function handleRTATableClick(index) {\n    // console.log(index)\n    setCountryDialogOpen(false)\n    setSelection(`RTA-${index}`)\n  }\n\n  function handleCountryTableClick(alpha2) {\n    setRTADialogOpen(false)\n    setSelection(alpha2)\n  }\n\n  function CountryDialog({ node }) {\n    const curRTAs = [...getRTAs(node)]\n    const [page, setPage] = React.useState(0);\n    const rowsPerPage = 10\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, curRTAs.length - page * rowsPerPage);\n    return(\n      <Dialog\n        onClose={() => setCountryDialogOpen(false)}\n        aria-labelledby=\"simple-dialog-title\"\n        open={countryDialogOpen}\n        fullWidth\n        maxWidth=\"sm\"\n      >\n        <DialogTitle id=\"simple-dialog-title\"><span className=\"flag\">{getFlagFromAlpha2(node.id)}</span>{node.name}</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            <CountryText node={node} />\n            <TableContainer>\n              <Table aria-label=\"simple table\" size=\"small\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Name</TableCell>\n                    <TableCell align=\"center\" style={{ width: 70 }}>Type</TableCell>\n                    <TableCell align=\"center\" style={{ width: 30 }}>Countries</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {curRTAs.slice(page * rowsPerPage, (page + 1) * rowsPerPage).map((rtaIndex, i) => {\n                    const curRTA = rtas[rtaIndex]\n                    return(\n                      <TableRow\n                        hover\n                        onClick={e => handleRTATableClick(rtaIndex)}\n                        key={`row${i}`}\n                      >\n                        <TableCell component=\"th\" scope=\"row\">\n                          {curRTA.rta}\n                        </TableCell>\n                        <TableCell align=\"center\">{curRTA.type}</TableCell>\n                        <TableCell align=\"center\">{curRTA.countries.length}</TableCell>\n                      </TableRow>\n                    )\n                  })}\n                  {/* {emptyRows > 0 && (\n                    <TableRow style={{ height: 33 * emptyRows }}>\n                      <TableCell colSpan={3} />\n                    </TableRow>\n                  )} */}\n                </TableBody>\n                {curRTAs.length > rowsPerPage &&\n                  <TableFooter>\n                    <TableRow>\n                      <TablePagination\n                        count={curRTAs.length}\n                        page={page}\n                        rowsPerPage={rowsPerPage}\n                        rowsPerPageOptions={[]}\n                        onChangePage={(event, newPage) => setPage(newPage)}\n                      />\n                    </TableRow>\n                  </TableFooter>\n                }\n              </Table>\n            </TableContainer>\n          </DialogContentText>  \n        </DialogContent>\n      </Dialog>\n    )\n  }\n\n  function RTADialog({ rta }) {\n    // console.log(rta)\n    const [page, setPage] = React.useState(0);\n    const rowsPerPage = 10\n    // const emptyRows = rowsPerPage - Math.min(rowsPerPage, curRTAs.length - page * rowsPerPage);\n    return(\n      <Dialog\n        onClose={() => setRTADialogOpen(false)}\n        aria-labelledby=\"simple-dialog-title\"\n        open={rtaDialogOpen}\n        fullWidth\n        maxWidth=\"sm\"\n      >\n        <DialogTitle id=\"simple-dialog-title\"><span className=\"flag\">🌐</span>{rta.rta}</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            <RTAText rta={rta} />\n            <TableContainer>\n              <Table aria-label=\"simple table\" size=\"small\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell style={{ width: 10 }} />\n                    <TableCell>Country</TableCell>\n                    <TableCell align=\"center\" style={{ width: 140 }}>GDP (USD)</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {rta.countries.slice(page * rowsPerPage, (page + 1) * rowsPerPage).map((alpha2, i) => {\n                    const curCountry = countries[alpha2]\n                    return(\n                      <TableRow\n                        hover\n                        onClick={e => handleCountryTableClick(alpha2)}\n                        key={`row${i}`}\n                      >\n                        <TableCell>\n                          {getFlagFromAlpha2(curCountry.id)}\n                        </TableCell>\n                        <TableCell component=\"th\" scope=\"row\">\n                          {curCountry.name}\n                        </TableCell>\n                        <TableCell align=\"center\">\n                          {curCountry.gdpyear !== 0\n                          ? <React.Fragment>\n                              {formatGDP(curCountry.gdp)}\n                              {/* <br />{curCountry.gdpyear} */}\n                            </React.Fragment>\n                          : <React.Fragment>\n                              –\n                            </React.Fragment>\n                          }\n                        </TableCell>\n                      </TableRow>\n                    )\n                  })}\n                  {/* {emptyRows > 0 && (\n                    <TableRow style={{ height: 33 * emptyRows }}>\n                      <TableCell colSpan={3} />\n                    </TableRow>\n                  )} */}\n                </TableBody>\n                {rta.countries.length > rowsPerPage &&\n                  <TableFooter>\n                    <TableRow>\n                      <TablePagination\n                        count={rta.countries.length}\n                        page={page}\n                        rowsPerPage={rowsPerPage}\n                        rowsPerPageOptions={[]}\n                        onChangePage={(event, newPage) => setPage(newPage)}\n                      />\n                    </TableRow>\n                  </TableFooter>\n                }\n              </Table>\n            </TableContainer>\n          </DialogContentText>  \n        </DialogContent>\n      </Dialog>\n    )\n  }\n\n  function renderOption(option) {\n    return(\n      <React.Fragment>\n        <span className=\"flag\">\n          {option.id.length === 2\n          ? <React.Fragment>{getFlagFromAlpha2(option.id)}</React.Fragment>\n          : <React.Fragment>🌐</React.Fragment>\n          }\n        </span>\n        {option.name}\n      </React.Fragment>\n    )\n  }\n\n  function renderInput(params) {\n    return(\n      <div className=\"search\">\n        <TextField\n          {...params}\n          label=\"Country or RTA\"\n          color=\"secondary\"\n          inputProps={{\n            ...params.inputProps,\n            autoComplete: 'new-password', // disable autocomplete and autofill\n          }}\n        />\n        <IconButton\n          aria-label=\"locate\"\n          disabled={value === null}\n          onClick={focusNode}\n        >\n          <LocationSearchingIcon />\n        </IconButton>\n      </div>\n    )\n  }\n\n  const processedRTAs = rtas.map((rta, i) => ({\n    group: 'RTAs',\n    id: `RTA-${i}`,\n    name: rta.rta,\n    rtatype: rta.type,\n    index: i\n  }))\n\n  const processedCountries = Object.values(countries).map(node => ({\n    group: 'Countries',\n    id: node.id,\n    name: node.name,\n    alpha3: node.alpha3,\n    region: node.region,\n    subregion: node.subregion\n  }))\n\n  return(\n    <div className=\"infobox\">\n      <Autocomplete\n        value={value}\n        onChange={(event, newValue) => {\n          setValue(newValue);\n          setSelection(newValue ? newValue.id : \"\")\n          document.activeElement.blur()\n        }}\n        inputValue={inputValue}\n        onInputChange={(event, newInputValue) => setInputValue(newInputValue)}\n        size=\"small\"\n        style={{ width: 300 }}\n        options={processedCountries.concat(processedRTAs)}\n        groupBy={(option) => option.group}\n        clearOnEscape\n        autoSelect\n        autoHighlight\n        getOptionLabel={(option) => {\n          if (typeof option === \"object\")\n            option = option.id\n          if (option.length === 2)\n            return countries[option] ? countries[option].name : \"\"\n          else {\n            const rtaID = parseInt(option.slice(4))\n            return rtas[rtaID] ? rtas[rtaID].rta : \"\"\n          }\n        }}\n        getOptionSelected={(option, value) => {\n          if (typeof value === \"object\")\n            value = value.id\n          return option.id === value\n        }}\n        renderOption={renderOption}\n        renderInput={renderInput}\n        filterOptions={(options, { inputValue }) => {\n          const rankCountries = matchSorter(options.filter(item => item.group === \"Countries\"), inputValue, {keys: ['name', 'id', 'alpha3']})\n          const rankRTAs = matchSorter(options.filter(item => item.group === \"RTAs\"), inputValue, {keys: ['name']})\n          return rankCountries.concat(rankRTAs)\n        }}\n      />\n      {selection &&\n        <div className=\"details\">\n          {selection.length === 2 && // country selected\n            <React.Fragment>\n              <CountryText node={countries[selection]} />\n              {countries[selection].neighbors &&\n                <React.Fragment>\n                  <div className=\"space-top\">\n                    <Button size=\"small\" onClick={handleMoreCountryDetails}>\n                      More details\n                    </Button>\n                  </div>\n                  <CountryDialog node={countries[selection]} />\n                </React.Fragment>\n              }\n            </React.Fragment>\n          }\n          {selection.length > 2 && // rta selected\n            <React.Fragment>\n              <RTAText rta={rtas[parseInt(selection.slice(4))]} />\n              <div className=\"space-top\">\n                <Button size=\"small\" onClick={handleMoreRTADetails}>\n                  More details\n                </Button>\n              </div>\n              <RTADialog rta={rtas[parseInt(selection.slice(4))]} />\n            </React.Fragment> \n          }\n        </div>\n      }\n    </div>\n  )\n\n}","import './App.css';\nimport React from 'react'\nimport Graph from './Graph'\nimport InfoBox from './InfoBox'\nimport GithubCorner from 'react-github-corner';\nimport orgData from \"./data.json\"\nimport orgRTAs from \"./rtas.json\"\n\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\n\nfunction App() {\n\n  const data = React.useMemo(() => {\n    for (const [, link] of Object.entries(orgData.links)) {\n      const a = orgData.nodes[link.source] || orgData.nodes[link.source.id]\n      const b = orgData.nodes[link.target] || orgData.nodes[link.target.id]\n      // if (a == undefined || b == undefined)\n      // \treturn {nodes: [], links: []}\n      !a.neighbors && (a.neighbors = new Set());\n      !b.neighbors && (b.neighbors = new Set());\n      a.neighbors.add(b);\n      b.neighbors.add(a);\n\n      !a.links && (a.links = []);\n      !b.links && (b.links = []);\n      a.links.push(link);\n      b.links.push(link);\n    }\n    // const friendSize = Object.entries(orgData.nodes).map(x => x[1]).map(y => (y.neighbors ? getTotalGDP(y.neighbors) + y.gdp : y.gdp) / orgData.total_gdp * 100 )\n    // console.log(friendSize.indexOf(Math.max(...friendSize)), Math.max(...friendSize))\n    return orgData\n  }, [])\n\n  const [selection, setSelection] = React.useState(\"\")\n  const [highlightNodes, setHighlightNodes] = React.useState(new Set());\n\tconst [highlightLinks, setHighlightLinks] = React.useState(new Set());\n\tconst fgRef = React.useRef();\n\n  const average = (arr) => arr.reduce( ( p, c ) => p + c, 0 ) / arr.length;\n\n  function focusNode() {\n    const hn = [...highlightNodes]\n    const centroidX = average(hn.map(node => node.x))\n    const centroidY = average(hn.map(node => node.y))\n    const centroidZ = average(hn.map(node => node.z))\n    const distance = 800\n\t\tconst distRatio = 1 + distance / Math.hypot(centroidX, centroidY, centroidZ)\n\t\tfgRef.current.cameraPosition(\n\t\t\t{ x: centroidX * distRatio, y: centroidY * distRatio, z: centroidZ * distRatio },\n\t\t\t{ x: 0, y: 0, z: 0 },\n\t\t\t3000\n\t\t)\n  }\n\n  const theme = createMuiTheme({\n    palette: {\n      type: \"dark\",\n      primary: {\n        main: \"#20635d\",\n      },\n      secondary: {\n        main: \"#ffab40\",\n      },\n    }\n  })\n\n  return (\n    <div className=\"App\">\n      <ThemeProvider theme={theme}>\n        <Graph\n          data={data}\n          rtas={orgRTAs}\n          selection={selection}\n          setSelection={setSelection}\n          highlightNodes={highlightNodes}\n          setHighlightNodes={setHighlightNodes}\n          highlightLinks={highlightLinks}\n          setHighlightLinks={setHighlightLinks}\n          fgRef={fgRef}\n        />\n        <GithubCorner\n          href=\"https://github.com/artt/rta-network\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          bannerColor=\"#20635d\"\n        />\n        <InfoBox\n          countries={data.nodes}\n          rtas={orgRTAs}\n          worldGDP={orgData.total_gdp}\n          selection={selection}\n          setSelection={setSelection}\n          focusNode={focusNode}\n        />\n      </ThemeProvider>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}