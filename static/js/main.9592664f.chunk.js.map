{"version":3,"sources":["Search.js","Graph.js","App.js","reportWebVitals.js","index.js"],"names":["theme","createMuiTheme","palette","type","primary","main","secondary","Search","curValue","countriesList","onSelect","React","useState","value","setValue","inputValue","setInputValue","ThemeProvider","Autocomplete","onChange","event","newValue","console","log","onInputChange","newInputValue","size","style","width","options","clearOnEscape","autoSelect","autoHighlight","getOptionLabel","option","label","renderOption","Fragment","renderInput","params","TextField","color","inputProps","autoComplete","getNumRTAs","linkArray","allRTAs","Set","forEach","link","rtas","withSize","monitorHeight","fgRef","useRef","fullHeight","use100vh","height","data","useMemo","Object","entries","orgData","links","a","nodes","source","id","b","target","neighbors","add","push","key","name","neighborsSet","highlightNodes","setHighlightNodes","highlightLinks","setHighlightLinks","hoverNode","setHoverNode","graphLoaded","setGraphLoaded","handleNodeClick","node","clear","neighbor","tmp","inverseSphereVolume","vol","Math","pow","PI","getColorFromSubregion","subregion","useEffect","current","d3Force","forceX","forceY","forceZ","strength","className","ref","graphData","values","nodeVal","gdp","enableNodeDrag","nodeThreeObject","opacity","has","THREE","transparent","linkColor","linkOpacity","nodeOpacity","onNodeClick","onEngineTick","linkDirectionalParticleWidth","linkDirectionalParticles","alpha3","Array","from","map","country","reduce","total_gdp","toFixed","App","href","rel","bannerColor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9592664f.chunk.js","sourcesContent":["import React from \"react\"\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n  palette: {\n    type: \"dark\",\n    primary: {\n      main: \"#20635d\",\n    },\n    secondary: {\n      main: \"#ffab40\",\n    },\n  }\n});\n\nexport default function Search({ curValue, countriesList, onSelect }) {\n\n  const [value, setValue] = React.useState(null);\n  const [inputValue, setInputValue] = React.useState('');\n\n  return(\n    <ThemeProvider theme={theme}>\n      <Autocomplete\n        value={value}\n        onChange={(event, newValue) => {\n          setValue(newValue);\n          console.log(newValue)\n          onSelect(newValue ? newValue.value : \"\")\n        }}\n        inputValue={inputValue}\n        onInputChange={(event, newInputValue) => {\n          setInputValue(newInputValue);\n        }}\n        size=\"small\"\n        style={{ width: 300 }}\n        options={countriesList}\n        clearOnEscape\n        autoSelect\n        autoHighlight\n        getOptionLabel={(option) => option.label}\n        renderOption={(option) => (\n          <React.Fragment>\n            {/* <span>{countryToFlag(option.code)}</span> */}\n            {option.label}\n          </React.Fragment>\n        )}\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            label=\"Search\"\n            color=\"secondary\"\n            // variant=\"outlined\"\n            inputProps={{\n              ...params.inputProps,\n              autoComplete: 'new-password', // disable autocomplete and autofill\n            }}\n          />\n        )}\n      />\n    </ThemeProvider>\n  )\n\n}","import React from \"react\"\nimport ForceGraph3D from \"react-force-graph-3d\"\nimport orgData from \"./data.json\"\nimport { use100vh } from \"react-div-100vh\"\n// import rtas from \"./rtas.json\"\nimport { forceX, forceY, forceZ } from 'd3-force-3d'\nimport * as THREE from 'three'\nimport { withSize } from 'react-sizeme'\nimport Search from './Search'\n\n// function numberToColor(number, alpha=1) {\n// \tconst r = (number & 0xff0000) >> 16;\n// \tconst g = (number & 0x00ff00) >> 8;\n// \tconst b = (number & 0x0000ff);\n// \treturn `rgba(${b},${g},${r},${alpha})`;\n// }\n// \nfunction getFlagFromAlpha2(alpha2) {\n\treturn alpha2.toUpperCase().replace(/./g, char => String.fromCodePoint(char.charCodeAt(0)+127397))\n}\n\nfunction getTotalGDP(neighborsSet) {\n\treturn Array.from(neighborsSet).map(country => country.gdp).reduce((a, b) => a + b, 0)\n}\n\nfunction getNumRTAs(linkArray) {\n\tlet allRTAs = new Set()\n\tlinkArray.forEach(link => {\n\t\tallRTAs = new Set([...allRTAs, ...link.rtas])\n\t})\n\treturn allRTAs.size\n}\n\nfunction Graph({ size }) {\n\n\tconst fgRef = React.useRef();\n\n  const fullHeight = use100vh() || size.height\n\n\tconst data = React.useMemo(() => {\n\t\tfor (const [, link] of Object.entries(orgData.links)) {\n\t\t\tconst a = orgData.nodes[link.source] || orgData.nodes[link.source.id]\n\t\t\tconst b = orgData.nodes[link.target] || orgData.nodes[link.target.id]\n\t\t\t// if (a == undefined || b == undefined)\n\t\t\t// \treturn {nodes: [], links: []}\n\t\t\t!a.neighbors && (a.neighbors = new Set());\n\t\t\t!b.neighbors && (b.neighbors = new Set());\n\t\t\ta.neighbors.add(b);\n\t\t\tb.neighbors.add(a);\n\n\t\t\t!a.links && (a.links = []);\n\t\t\t!b.links && (b.links = []);\n\t\t\ta.links.push(link);\n\t\t\tb.links.push(link);\n\t\t}\n\t\t// const friendSize = Object.entries(orgData.nodes).map(x => x[1]).map(y => (y.neighbors ? getTotalGDP(y.neighbors) + y.gdp : y.gdp) / orgData.total_gdp * 100 )\n\t\t// console.log(friendSize.indexOf(Math.max(...friendSize)), Math.max(...friendSize))\n\t\treturn orgData\n\t}, [])\n\n\tlet countriesList = []\n\tfor (const [key, value] of Object.entries(orgData.nodes)) {\n\t\tcountriesList.push({value: key, label: value.name})\n\t}\n\n\tconst [highlightNodes, setHighlightNodes] = React.useState(new Set());\n\tconst [highlightLinks, setHighlightLinks] = React.useState(new Set());\n\tconst [hoverNode, setHoverNode] = React.useState(null);\n\tconst [graphLoaded, setGraphLoaded] = React.useState(false);\n\n\tconst handleNodeClick = node => {\n\t\tconsole.log(node)\n\t\thighlightNodes.clear();\n\t\thighlightLinks.clear();\n\t\tif (node) {\n\t\t\thighlightNodes.add(node);\n\t\t\tnode.neighbors && node.neighbors.forEach(neighbor => highlightNodes.add(neighbor));\n\t\t\tnode.links && node.links.forEach(link => highlightLinks.add(link));\n\t\t}\n\n\t\tsetHoverNode(node || null);\n\t\t// fgRef.current.refresh()\n\t\tsetHighlightNodes(highlightNodes);\n\t\tsetHighlightLinks(highlightLinks);\n\n\t\thighlightLinks.forEach(link => {\n\t\t\t// console.log(link.target)\n\t\t\t// console.log(node)\n\t\t\tif (link.target === node) {\n\t\t\t\tconst tmp = link.target\n\t\t\t\tlink.target = link.source\n\t\t\t\tlink.source = tmp\n\t\t\t}\n\t\t\t// fgRef.current.emitParticle(link)\n\t\t})\n\t};\n\n\tReact.useEffect(() => {\n\t\tfgRef.current.d3Force('centerX', forceX(0));\n\t\tfgRef.current.d3Force('centerY', forceY(0));\n\t\tfgRef.current.d3Force('centerZ', forceZ(0));\n\t\tfgRef.current.d3Force('charge').strength(-150);\n\t}, [graphLoaded]);\n\n\tfunction inverseSphereVolume(vol) {\n\t\treturn Math.pow(3 / (4*Math.PI) * vol, 1/3)\n\t}\n\n\tfunction getColorFromSubregion(subregion) {\n\t\tswitch(subregion) {\n\t\t\tcase 'Northern America': return 0xFFCC00\n\t\t\tcase 'Latin America and the Caribbean': return 0xF6B40E\n\n\t\t\tcase 'Western Europe': return 0x003399\n\t\t\tcase 'Southern Europe': return 0x003399\n\t\t\tcase 'Northern Europe': return 0x4c70b7\n\t\t\tcase 'Eastern Europe': return 0xDA291C\n\n\t\t\tcase 'Northern Africa': return 0xc2b280\n\t\t\tcase 'Sub-Saharan Africa': return 0x01853F\n\n\t\t\tcase 'Western Asia': return 0x9cbf5a\n\t\t\tcase 'Southern Asia': return 0xFF9933\n\t\t\tcase 'Central Asia': return 0xd92e72\n\t\t\tcase 'Eastern Asia': return 0xAA381E\n\t\t\tcase 'South-eastern Asia': return 0x8b30bf\n\n\t\t\tcase 'Australia and New Zealand': return 0x48D1CC\n\t\t\tcase 'Polynesia': return 0x48D1CC\n\t\t\tcase 'Melanesia': return 0x48D1CC\n\t\t\tcase 'Micronesia': return 0x48D1CC\n\t\t\tcase 'Antarctica': return 0x48D1CC\n\t\t\tdefault: return 0x666666\n\t\t}\n\t}\n\n\tfunction getLinkColor(link) {\n\t\tif (hoverNode !== null) {\n\t\t\tif (highlightLinks.has(link)) {\n\t\t\t\t// if (link.source.subregion === link.target.subregion)\n\t\t\t\t// \treturn 0xffffff\n\t\t\t\treturn getColorFromSubregion(link.target.subregion)\n\t\t\t\t// return `rgba(255, 255, 255, 0.8)`\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn `rgba(180, 180, 180, 0.1)`\n\t\t\t}\n\t\t}\n\t\treturn `rgba(255, 255, 255, 0.15)`\n\t}\n\n\tfunction drawNode(node) {\n\t\tlet color = getColorFromSubregion(node.subregion)\n\t\tlet opacity = 0.75\n\t\tif (hoverNode !== null) {\n\t\t\tif (hoverNode === node) {\n\t\t\t\tcolor = 0xffffff\n\t\t\t\topacity = 1\n\t\t\t}\n\t\t\telse if (highlightNodes.has(node)) {\n\t\t\t\topacity = 0.9\n\t\t\t}\n\t\t\telse {\n\t\t\t\topacity = 0.4\n\t\t\t}\n\t\t}\n\t\treturn new THREE.Mesh(\n\t\t\tnew THREE.SphereGeometry(inverseSphereVolume(node.gdp*1e-9) * 1.5, 16, 16),\n\t\t\tnew THREE.MeshStandardMaterial( {color: color, opacity: opacity, transparent: true} )\n\t\t)\n\t}\n\n\tfunction clearSelection() {\n\t\tsetHoverNode(null)\n\t\thighlightNodes.clear()\n\t\thighlightLinks.clear()\n\t}\n\n\tfunction handleSelectNodeFromSearch(alpha3) {\n\t\tif (!alpha3) {\n\t\t\thandleNodeClick(null)\n\t\t}\n\t\thandleNodeClick(data.nodes[alpha3])\n\t}\n\n\treturn(\n\t\t<div id=\"canvas\">\n\t\t\t{!graphLoaded && <div className=\"center full\">Loading RTAs...</div>}\n\t\t\t<ForceGraph3D\n\t\t\t\tref={fgRef}\n\t\t\t\twidth={size.width}\n\t\t\t\theight={fullHeight}\n\t\t\t\tgraphData={{nodes: Object.values(data.nodes), links: Object.values(data.links)}}\n\t\t\t\tnodeVal={node => inverseSphereVolume(node.gdp*1e-9)}\n\t\t\t\tenableNodeDrag={false}\n\t\t\t\tnodeThreeObject={drawNode}\n\t\t\t\tlinkColor={getLinkColor}\n\t\t\t\tlinkOpacity={1}\n\t\t\t\tnodeOpacity={1}\n\t\t\t\tonNodeClick={handleNodeClick}\n\t\t\t\tonEngineTick={() => setGraphLoaded(true)}\n\t\t\t\tlinkDirectionalParticleWidth={2}\n\t\t\t\tlinkDirectionalParticles={link => highlightLinks.has(link) ? 3 : 0}\n\t\t\t/>\n\t\t\t{graphLoaded &&\n\t\t\t\t<div className=\"search\">\n\t\t\t\t\t<Search\n\t\t\t\t\t\tcurValue={hoverNode && {value: hoverNode.id, label: hoverNode.name}}\n\t\t\t\t\t\tcountriesList={countriesList}\n\t\t\t\t\t\tonSelect={handleSelectNodeFromSearch}\n\t\t\t\t\t/>\n\t\t\t\t\t{hoverNode && \n\t\t\t\t\t\t<div className=\"details\">\n\t\t\t\t\t\t\t{/* <div>{getFlagFromAlpha2(hoverNode.alpha2)} {hoverNode.name}</div> */}\n\t\t\t\t\t\t\t<div>RTAs: {hoverNode.neighbors\n\t\t\t\t\t\t\t\t? <React.Fragment>\n\t\t\t\t\t\t\t\t\t\t{getNumRTAs(hoverNode.links)}\n\t\t\t\t\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t\t\t\t: 0}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div>Neighbors: {hoverNode.neighbors\n\t\t\t\t\t\t\t\t? <React.Fragment>\n\t\t\t\t\t\t\t\t\t\t{hoverNode.neighbors.size} ({((getTotalGDP(hoverNode.neighbors) + hoverNode.gdp) / data.total_gdp * 100).toFixed(2)}% of World GDP, including itself)\n\t\t\t\t\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t\t\t\t: 0}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t}\n\t\t\t{/* {graphLoaded && hoverNode &&\n\t\t\t\t<div className=\"bottom-panel\">\n\t\t\t\t\t<div>{getFlagFromAlpha2(hoverNode.alpha2)} {hoverNode.name}</div>\n\t\t\t\t\t<div className=\"details\">\n\t\t\t\t\t\t<div>RTAs: {hoverNode.neighbors\n\t\t\t\t\t\t\t? <React.Fragment>\n\t\t\t\t\t\t\t\t\t{getNumRTAs(hoverNode.links)}\n\t\t\t\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t\t\t: 0}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div>Neighbors: {hoverNode.neighbors\n\t\t\t\t\t\t\t? <React.Fragment>\n\t\t\t\t\t\t\t\t\t{hoverNode.neighbors.size} ({((getTotalGDP(hoverNode.neighbors) + hoverNode.gdp) / data.total_gdp * 100).toFixed(2)}% of World GDP, including itself)\n\t\t\t\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t\t\t: 0}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<button className=\"clear-button\" onClick={clearSelection}>Clear</button>\n\t\t\t\t</div>\n\t\t\t} */}\n\t\t</div>\n\t)\n}\n\nexport default withSize({ monitorHeight: true })(Graph)","import './App.css';\nimport Graph from './Graph'\nimport GithubCorner from 'react-github-corner';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Graph />\n      <GithubCorner\n      \thref=\"https://github.com/artt/rta-network\"\n      \ttarget=\"_blank\"\n      \trel=\"noopener noreferrer\"\n      \tbannerColor=\"#20635d\"\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}