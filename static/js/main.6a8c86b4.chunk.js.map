{"version":3,"sources":["Graph.js","InfoBox.js","App.js","reportWebVitals.js","index.js"],"names":["inverseSphereVolume","vol","Math","pow","PI","getColorFromSubregion","subregion","withSize","monitorHeight","data","rtas","selection","setSelection","highlightNodes","setHighlightNodes","highlightLinks","setHighlightLinks","size","fgRef","fullHeight","use100vh","height","React","useState","hoverNode","setHoverNode","graphLoaded","setGraphLoaded","handleNodeClick","node","clear","add","neighbors","forEach","neighbor","links","link","id","target","tmp","source","useEffect","length","rtaID","countries","i","nodes","j","handleRTASelect","parseInt","slice","current","d3Force","forceX","forceY","forceZ","strength","className","ref","width","graphData","Object","values","nodeVal","gdp","enableNodeDrag","nodeThreeObject","color","opacity","has","THREE","max","transparent","linkColor","linkOpacity","nodeOpacity","onNodeClick","onEngineTick","linkDirectionalParticleWidth","linkDirectionalParticles","theme","createMuiTheme","palette","type","primary","main","secondary","getNumRTAs","linkArray","allRTAs","Set","InfoBox","worldGDP","focusNode","value","setValue","inputValue","setInputValue","list","processedRTAs","map","rta","group","name","rtatype","index","processedCountries","alpha3","region","ThemeProvider","Autocomplete","onChange","event","newValue","onInputChange","newInputValue","style","options","concat","groupBy","option","clearOnEscape","autoSelect","autoHighlight","getOptionLabel","getOptionSelected","renderOption","Fragment","alpha2","toUpperCase","replace","char","String","fromCodePoint","charCodeAt","renderInput","params","TextField","label","inputProps","autoComplete","IconButton","aria-label","disabled","onClick","filterOptions","rankCountries","matchSorter","filter","item","keys","rankRTAs","Array","from","country","reduce","a","b","toFixed","code","App","useMemo","entries","orgData","push","useRef","average","arr","p","c","orgRTAs","total_gdp","hn","centroidX","x","centroidY","y","centroidZ","z","distRatio","hypot","cameraPosition","href","rel","bannerColor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6a8c86b4.chunk.js","sourcesContent":["import React from \"react\"\nimport ForceGraph3D from \"react-force-graph-3d\"\nimport { use100vh } from \"react-div-100vh\"\nimport { forceX, forceY, forceZ } from 'd3-force-3d'\nimport * as THREE from 'three'\nimport { withSize } from 'react-sizeme'\n\nfunction inverseSphereVolume(vol) {\n\treturn Math.pow(3 / (4*Math.PI) * vol, 1/3)\n}\n\nfunction getColorFromSubregion(subregion) {\n\tswitch(subregion) {\n\t\tcase 'Northern America': return 0xFFCC00\n\t\tcase 'Latin America and the Caribbean': return 0xF6B40E\n\n\t\tcase 'Western Europe': return 0x003399\n\t\tcase 'Southern Europe': return 0x003399\n\t\tcase 'Northern Europe': return 0x4c70b7\n\t\tcase 'Eastern Europe': return 0xDA291C\n\n\t\tcase 'Northern Africa': return 0xc2b280\n\t\tcase 'Sub-Saharan Africa': return 0x01853F\n\n\t\tcase 'Western Asia': return 0x9cbf5a\n\t\tcase 'Southern Asia': return 0xFF9933\n\t\tcase 'Central Asia': return 0xd92e72\n\t\tcase 'Eastern Asia': return 0xAA381E\n\t\tcase 'South-eastern Asia': return 0x8b30bf\n\n\t\tcase 'Australia and New Zealand': return 0x48D1CC\n\t\tcase 'Polynesia': return 0x48D1CC\n\t\tcase 'Melanesia': return 0x48D1CC\n\t\tcase 'Micronesia': return 0x48D1CC\n\t\tcase 'Antarctica': return 0x48D1CC\n\t\tdefault: return 0x666666\n\t}\n}\n\nfunction Graph({ data, rtas, selection, setSelection, highlightNodes, setHighlightNodes, highlightLinks, setHighlightLinks, size, fgRef }) {\n\n  const fullHeight = use100vh() || size.height\n\n\tconst [hoverNode, setHoverNode] = React.useState(null);\n\t// const [highlightNodes, setHighlightNodes] = React.useState(new Set());\n\t// const [highlightLinks, setHighlightLinks] = React.useState(new Set());\n\tconst [graphLoaded, setGraphLoaded] = React.useState(false);\n\n\tfunction drawNode(node) {\n\t\tlet color = getColorFromSubregion(node.subregion)\n\t\tlet opacity = 0.75\n\t\tif (selection) {\n\t\t\tif (hoverNode === node) {\n\t\t\t\tcolor = 0xffffff\n\t\t\t\topacity = 1\n\t\t\t}\n\t\t\telse if (highlightNodes.has(node)) {\n\t\t\t\topacity = 0.9\n\t\t\t}\n\t\t\telse {\n\t\t\t\topacity = 0.4\n\t\t\t}\n\t\t}\n\t\treturn new THREE.Mesh(\n\t\t\tnew THREE.SphereGeometry(Math.max(inverseSphereVolume(node.gdp*1e-9), 1) * 1.5, 16, 16),\n\t\t\tnew THREE.MeshStandardMaterial( {color: color, opacity: opacity, transparent: true} )\n\t\t)\n\t}\n\n\tfunction getLinkColor(link) {\n\t\tif (selection) {\n\t\t\tif (highlightLinks.has(link)) {\n\t\t\t\treturn selection.length > 2 ? 0xffffff : getColorFromSubregion(link.target.subregion)\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn `rgba(180, 180, 180, 0.1)`\n\t\t\t}\n\t\t}\n\t\treturn `rgba(255, 255, 255, 0.15)`\n\t}\n\n\tReact.useEffect(() => {\n\t\t\n\t\tif (selection.length > 2) {\n\t\t\t// select RTA\n\t\t\thandleRTASelect(parseInt(selection.slice(4)))\n\t\t}\n\t\telse {\n\t\t\tconst node = data.nodes[selection]\n\t\t\thandleNodeClick(node)\n\t\t}\n\t}, [selection])\n\n\tfunction handleRTASelect(rtaID) {\n\t\tsetHoverNode(null)\n\t\thighlightNodes.clear();\n\t\thighlightLinks.clear();\n\t\tconst countries = rtas[rtaID].countries\n\t\tfor (let i = 0; i < countries.length; i ++) {\n\t\t\thighlightNodes.add(data.nodes[countries[i]])\n\t\t\tfor (let j = i + 1; j < countries.length; j ++) {\n\t\t\t\thighlightLinks.add(data.links[countries[i] + '-' + countries[j]])\n\t\t\t}\n\t\t}\n\t\tsetHighlightNodes(highlightNodes);\n\t\tsetHighlightLinks(highlightLinks);\n\t}\n\n\tfunction handleNodeClick(node) {\n\n\t\t// console.log(node)\n\t\thighlightNodes.clear();\n\t\thighlightLinks.clear();\n\t\tif (node) {\n\t\t\thighlightNodes.add(node);\n\t\t\tnode.neighbors && node.neighbors.forEach(neighbor => highlightNodes.add(neighbor));\n\t\t\tnode.links && node.links.forEach(link => highlightLinks.add(link));\n\t\t\tsetSelection(node.id)\n\t\t}\n\n\t\tsetHoverNode(node);\n\t\tsetHighlightNodes(highlightNodes);\n\t\tsetHighlightLinks(highlightLinks);\n\n\t\thighlightLinks.forEach(link => {\n\t\t\tif (link.target === node) {\n\t\t\t\tconst tmp = link.target\n\t\t\t\tlink.target = link.source\n\t\t\t\tlink.source = tmp\n\t\t\t}\n\t\t\t// fgRef.current.emitParticle(link)\n\t\t})\n\n\t}\n\n\tReact.useEffect(() => {\n\t\tfgRef.current.d3Force('centerX', forceX(0));\n\t\tfgRef.current.d3Force('centerY', forceY(0));\n\t\tfgRef.current.d3Force('centerZ', forceZ(0));\n\t\tfgRef.current.d3Force('charge').strength(-150);\n\t}, [graphLoaded]);\n\n\treturn(\n\t\t<div id=\"canvas\">\n\t\t\t{!graphLoaded && <div className=\"center full\">Loading stuff...</div>}\n\t\t\t<ForceGraph3D\n\t\t\t\tref={fgRef}\n\t\t\t\twidth={size.width}\n\t\t\t\theight={fullHeight}\n\t\t\t\tgraphData={{nodes: Object.values(data.nodes), links: Object.values(data.links)}}\n\t\t\t\tnodeVal={node => inverseSphereVolume(node.gdp*1e-9)}\n\t\t\t\tenableNodeDrag={false}\n\t\t\t\tnodeThreeObject={drawNode}\n\t\t\t\tlinkColor={getLinkColor}\n\t\t\t\tlinkOpacity={1}\n\t\t\t\tnodeOpacity={1}\n\t\t\t\tonNodeClick={handleNodeClick}\n\t\t\t\tonEngineTick={() => setGraphLoaded(true)}\n\t\t\t\tlinkDirectionalParticleWidth={2}\n\t\t\t\tlinkDirectionalParticles={link => highlightLinks.has(link) ? 3 : 0}\n\t\t\t/>\n\t\t</div>\n\t)\n}\n\nexport default withSize({ monitorHeight: true })(Graph)","import React from \"react\"\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\nimport LocationSearchingIcon from '@material-ui/icons/LocationSearching';\nimport IconButton from '@material-ui/core/IconButton';\nimport { matchSorter } from 'match-sorter';\n\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n  palette: {\n    type: \"dark\",\n    primary: {\n      main: \"#20635d\",\n    },\n    secondary: {\n      main: \"#ffab40\",\n    },\n  }\n});\n\nfunction getNumRTAs(linkArray) {\n  let allRTAs = new Set()\n  linkArray.forEach(link => {\n    allRTAs = new Set([...allRTAs, ...link.rtas])\n  })\n  return allRTAs.size\n}\n\nfunction getFlagFromAlpha2(alpha2) {\n\treturn alpha2.toUpperCase().replace(/./g, char => String.fromCodePoint(char.charCodeAt(0)+127397))\n}\n\nfunction getTotalGDP(node) {\n\tconst neighborsGDP = Array.from(node.neighbors).map(country => country.gdp).reduce((a, b) => a + b, 0)\n  return neighborsGDP + node.gdp\n}\n\nexport default function InfoBox({ countries, rtas, worldGDP, selection, setSelection, focusNode }) {\n\n  const [value, setValue] = React.useState(null);\n  const [inputValue, setInputValue] = React.useState('');\n\n  React.useEffect(() => {\n    if (selection)\n      setValue(selection)\n    else\n      setValue(null)\n  }, [selection])\n\n  function getTotalGDPFromCountriesList(list) {\n    return list.map(code => countries[code]).map(country => country.gdp).reduce((a, b) => a + b, 0) / worldGDP * 100\n  }\n\n  function renderOption(option) {\n    return(\n      <React.Fragment>\n        {option.id.length === 2 && <span className=\"flag\">{getFlagFromAlpha2(option.id)}</span>}\n        {option.name}\n      </React.Fragment>\n    )\n  }\n\n  function renderInput(params) {\n    return(\n      <div className=\"search\">\n        <TextField\n          {...params}\n          label=\"Country or RTA\"\n          color=\"secondary\"\n          inputProps={{\n            ...params.inputProps,\n            autoComplete: 'new-password', // disable autocomplete and autofill\n          }}\n        />\n        <IconButton\n          aria-label=\"locate\"\n          disabled={value === null}\n          onClick={focusNode}\n        >\n          <LocationSearchingIcon />\n        </IconButton>\n      </div>\n    )\n  }\n\n  const processedRTAs = rtas.map((rta, i) => ({\n    group: 'RTAs',\n    id: `RTA-${i}`,\n    name: rta.rta,\n    rtatype: rta.type,\n    index: i\n  }))\n\n  const processedCountries = Object.values(countries).map(node => ({\n    group: 'Countries',\n    id: node.id,\n    name: node.name,\n    alpha3: node.alpha3,\n    region: node.region,\n    subregion: node.subregion\n  }))\n\n  return(\n    <div className=\"infobox\">\n      <ThemeProvider theme={theme}>\n        <Autocomplete\n          value={value}\n          onChange={(event, newValue) => {\n            setValue(newValue);\n            setSelection(newValue ? newValue.id : \"\")\n          }}\n          inputValue={inputValue}\n          onInputChange={(event, newInputValue) => setInputValue(newInputValue)}\n          size=\"small\"\n          style={{ width: 300 }}\n          // options={processedCountries}\n          options={processedCountries.concat(processedRTAs)}\n          groupBy={(option) => option.group}\n          clearOnEscape\n          autoSelect\n          autoHighlight\n          getOptionLabel={(option) => {\n            if (typeof option === \"object\")\n              option = option.id\n            if (option.length === 2)\n              return countries[option] ? countries[option].name : \"\"\n            else {\n              const rtaID = parseInt(option.slice(4))\n              return rtas[rtaID] ? rtas[rtaID].rta : \"\"\n            }\n          }}\n          getOptionSelected={(option, value) => {\n            if (typeof value === \"object\")\n              value = value.id\n            return option.id === value\n          }}\n          renderOption={renderOption}\n          renderInput={renderInput}\n          filterOptions={(options, { inputValue }) => {\n            const rankCountries = matchSorter(options.filter(item => item.group === \"Countries\"), inputValue, {keys: ['name', 'id', 'alpha3']})\n            const rankRTAs = matchSorter(options.filter(item => item.group === \"RTAs\"), inputValue, {keys: ['name']})\n            return rankCountries.concat(rankRTAs)\n          }}\n        />\n        {selection &&\n          <div className=\"details\">\n            {selection.length === 2 &&\n              <React.Fragment>\n                <div>RTAs: {countries[selection].neighbors\n                  ? <React.Fragment>\n                      {getNumRTAs(countries[selection].links)}\n                    </React.Fragment>\n                  : 0}\n                </div>\n                <div>Neighbors: {countries[selection].neighbors\n                  ? <React.Fragment>\n                      {countries[selection].neighbors.size} ({(getTotalGDP(countries[selection]) / worldGDP * 100).toFixed(2)}% of World GDP, including itself)\n                    </React.Fragment>\n                  : 0}\n                </div>\n              </React.Fragment>\n            }\n            {selection.length > 2 &&\n              <React.Fragment>\n                <div>Countries: {rtas[parseInt(selection.slice(4))].countries.length} ({getTotalGDPFromCountriesList(rtas[parseInt(selection.slice(4))].countries).toFixed(2)}% of World GDP)</div>\n                <div>Type: {rtas[parseInt(selection.slice(4))].type}</div>\n              </React.Fragment> \n            }\n          </div>\n        }\n      </ThemeProvider>\n    </div>\n  )\n\n}","import './App.css';\nimport React from 'react'\nimport Graph from './Graph'\nimport InfoBox from './InfoBox'\nimport GithubCorner from 'react-github-corner';\nimport orgData from \"./data.json\"\nimport orgRTAs from \"./rtas.json\"\n\nfunction App() {\n\n  const data = React.useMemo(() => {\n    for (const [, link] of Object.entries(orgData.links)) {\n      const a = orgData.nodes[link.source] || orgData.nodes[link.source.id]\n      const b = orgData.nodes[link.target] || orgData.nodes[link.target.id]\n      // if (a == undefined || b == undefined)\n      // \treturn {nodes: [], links: []}\n      !a.neighbors && (a.neighbors = new Set());\n      !b.neighbors && (b.neighbors = new Set());\n      a.neighbors.add(b);\n      b.neighbors.add(a);\n\n      !a.links && (a.links = []);\n      !b.links && (b.links = []);\n      a.links.push(link);\n      b.links.push(link);\n    }\n    // const friendSize = Object.entries(orgData.nodes).map(x => x[1]).map(y => (y.neighbors ? getTotalGDP(y.neighbors) + y.gdp : y.gdp) / orgData.total_gdp * 100 )\n    // console.log(friendSize.indexOf(Math.max(...friendSize)), Math.max(...friendSize))\n    return orgData\n  }, [])\n\n  const [selection, setSelection] = React.useState(\"\")\n  const [highlightNodes, setHighlightNodes] = React.useState(new Set());\n\tconst [highlightLinks, setHighlightLinks] = React.useState(new Set());\n\tconst fgRef = React.useRef();\n\n  const average = (arr) => arr.reduce( ( p, c ) => p + c, 0 ) / arr.length;\n\n  function focusNode() {\n    const hn = [...highlightNodes]\n    const centroidX = average(hn.map(node => node.x))\n    const centroidY = average(hn.map(node => node.y))\n    const centroidZ = average(hn.map(node => node.z))\n    const distance = 800\n\t\tconst distRatio = 1 + distance / Math.hypot(centroidX, centroidY, centroidZ)\n\t\tfgRef.current.cameraPosition(\n\t\t\t{ x: centroidX * distRatio, y: centroidY * distRatio, z: centroidZ * distRatio },\n\t\t\t{ x: 0, y: 0, z: 0 },\n\t\t\t3000\n\t\t)\n  }\n\n  return (\n    <div className=\"App\">\n      <Graph\n        data={data}\n        rtas={orgRTAs}\n        selection={selection}\n        setSelection={setSelection}\n        highlightNodes={highlightNodes}\n        setHighlightNodes={setHighlightNodes}\n        highlightLinks={highlightLinks}\n        setHighlightLinks={setHighlightLinks}\n        fgRef={fgRef}\n      />\n      <InfoBox\n        countries={data.nodes}\n        rtas={orgRTAs}\n        worldGDP={orgData.total_gdp}\n        selection={selection}\n        setSelection={setSelection}\n        focusNode={focusNode}\n      />\n      <GithubCorner\n      \thref=\"https://github.com/artt/rta-network\"\n      \ttarget=\"_blank\"\n      \trel=\"noopener noreferrer\"\n      \tbannerColor=\"#20635d\"\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}